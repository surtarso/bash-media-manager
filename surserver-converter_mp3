#!/bin/bash

## ffmpeg script to remove flac/wav/ogg/m4a/wma from music library.
## Converts to mp3 and removes original files if wanted.
## Point to the audio library root folder as shown below!
## AUDIOROOT='/your/library/music/' in .env file or use
## the interactive mode to enter custom settings
## Tarso Galvao 28/03/23 on Debian 11.

##TODO: -log stuff

## load enviroment variables
if [ -f $HOME/bmm/.env ]; then
    . $HOME/bmm/.env
else
    echo -e "FATAL ERROR: .env not found.$\n
	Use surserver-setup_enviroment to create one.\nAborting...";
    exit 1;
fi

## AUTOMODE DEFAULT FLAGS (--auto)
REMOVE=1 # remove original files (0=no 1=yes)
FORMAT_ARRAY=("flac" "wav" "ogg" "m4a" "wma") # input format(s)
BITRATE='192k' # output mp3 bitrate

## FOLDERS
set_new_path (){
	echo -e "\n${OK}Set new path:${NC} (ex: ${WARN}/home/user/music/${NC} )";
	read -e AUDIOROOT < /dev/tty
	check_path;
}
check_path (){
	cd "$AUDIOROOT" &>/dev/null && confirm_path || {
		echo -e "\n${ERROR}ERROR: Folder ${WARN}$AUDIOROOT${ERROR} could not be found.${NC}\n";
		set_new_path;
		};
}
confirm_path (){
	echo -e "\n${OK}Found:${NC} $AUDIOROOT\n"
	echo -e 'Is this the correct path? (Y/n) \c'
	read -e yesno < /dev/tty
		if [ "$yesno" = "n" ] || [ "$yesno" = "N" ]; then
			set_new_path;
		else
			echo -e "\n${OK}Path set to ${WARN}$AUDIOROOT${NC}\n"
		fi
}

## AUDIO FORMAT
## set input file format
set_input_format (){
	echo -e 'Choose format(s) to be converted: (1-6)'
	select fmt in flac wav ogg m4a wma ALL
	do
		case $fmt in
			"flac")
				FORMAT_ARRAY=("flac")
				break;;
			"wav")
				FORMAT_ARRAY=("wav")
				break;;
			"ogg")
				FORMAT_ARRAY=("ogg")
				break;;
			"m4a")
				FORMAT_ARRAY=("m4a")
				break;;
			"wma")
				FORMAT_ARRAY=("wma")
				break;;
			"ALL")
				FORMAT_ARRAY=("flac" "wav" "ogg" "m4a" "wma")
				break;;
			*)
				echo -e 'Not a valid choice. (1-6)';;
		esac
	done
	echo -e "\n${OK}Selected input: ${WARN}'${FORMAT_ARRAY[*]}'${NC}"
}

## set output mp3 file quality
set_output_format (){
	echo -e '\nChoose MP3 quality: (1-4)'
	select bit in 96k 128k 256k 320k
	do
		case $bit in
			"96k")
				BITRATE='96k'
				break;;
			"128k")
				BITRATE='128k'
				break;;
			"256k")
				BITRATE='256k'
				break;;
			"320k")
				BITRATE='320k'
				break;;
			*)
				echo -e 'Not a valid choice. (1-4)';;
		esac
	done
	echo -e "\n${OK}Selected output: ${WARN}MP3 - ${BITRATE}${NC}"
}

## FILES
## set removal flag
set_removal_flag (){
	echo -e '\nRemove original files after conversion? (y/N) \c'
	read -r yesno < /dev/tty
		if [ "$yesno" = "y" ] || [ "$yesno" = "Y" ]; then
			echo -e "\n${OK}Original files ${ERROR}WILL BE REMOVED.${NC}\n"
			REMOVE=1
		else
			echo -e "\n${OK}Original files will ${ERROR}NOT${OK} be removed.${WARN}\nThey will be moved to ${NC}$AUDIOJUNK${WARN}.${NC}\n" 
			if [ ! -d "$AUDIOJUNK" ]; then mkdir "$AUDIOJUNK" &>/dev/null; fi || {
				echo -e "${ERROR}ERROR: Could not create ${WARN}$AUDIOJUNK${ERROR} .\n Check permissions and try again.";
				exit 1;
				}
			REMOVE=0
		fi
}

## JOBS
## ffmpeg conversion
execute_tasks (){
	echo -e "________________________________________________"
	echo -e "Audioroot: ${WARN}$AUDIOROOT${NC}"
	echo -e "Remove: ${WARN}$REMOVE${NC} (1-Yes 0-No)"
	echo -e "Format(s): ${WARN}${FORMAT_ARRAY[*]}${NC}"
	echo -e "Bitrate: ${WARN}$BITRATE${NC}"
	dep_check ffmpeg;
	dep_check libmp3lame0;
	echo -e "________________________________________________\n"
	echo -e "${OK}Starting...${NC}"
	echo -e "Press ${WARN}"Control + C"${NC} to abort.\n"
	for (( i=3; i>0; i--)); do sleep 1 & printf "            $i \r"; wait; done
	
	for format in "${FORMAT_ARRAY[@]}"; do
		echo -e "${OK}Starting ${WARN}$format${OK} conversion...${NC}"
		find -name "*.${format}" -exec bash -c 'ffmpeg -i "{}" -y -acodec libmp3lame -ab '${BITRATE}' "${0/.'${format}'}.mp3"' {} \;
		echo -e "${WARN}$format${OK} conversion completed.${NC}\n"

		## originals removal
		if [ $REMOVE -eq 1 ]; then
			echo -e "${ERROR}Removing original ${WARN}$format${ERROR} files...${NC}"
			find -name "*.${format}" -exec rm -rfv {} \;
			echo -e "${ERROR}Original ${WARN}$format${ERROR} files removed.${NC}\n"
		else
			## move originals to junk folder
			echo -e "${OK}Moving original ${WARN}$format${OK} files to ${WARN}$AUDIOJUNK...${NC}"
			find -name "*.${format}" -exec mv {} "$AUDIOJUNK" \;
			echo -e "${OK}Original ${WARN}$format${OK} files moved to ${WARN}$AUDIOJUNK.${NC}\n"
		fi
	done
}

main_menu () {
	##------------------------- PATH:
	AUDIOROOT=$(dialog --colors \
		--backtitle "\Z5Bash Media Manager" \
		--stdout --menu 'Audio files location:' \
		0 0 0 \
		$AUDIOROOT '(default)' \
		Custom '(add new)')
	if [ "$AUDIOROOT" == 'Custom' ]; then
		AUDIOROOT=$(dialog --colors \
		--backtitle "\Z5Bash Media Manager" \
		--title "SurServer Converter MP3" \
        --inputbox "Enter location full path: \n \
		(ex.: /full/path/to/dir/ )" 10 40 \
		3>&1 1>&2 2>&3 3>&-)
		clear
	fi
	#error checks
	if [ "$AUDIOROOT" == "" ]; then 
		echo -e "Path cant be empty, aborting..."; sleep 2;
		clear && eval surserver-launcher; exit 1;
	else 
		cd "$AUDIOROOT" &>/dev/null || { echo -e "Path does not exist, aborting..."; sleep 2;
		clear && eval surserver-launcher; exit 1; }
	fi

	##------------------------ REMOVAL FLAG
	REMOVE=$(dialog --stdout --colors \
		--backtitle "\Z5Bash Media Manager" \
		--title "Remove original files?" \
		--yesno "Yes: Remove, No:  Keep" 7 60 )
	dialog_status=$?
	if [ "$dialog_status" -eq 0 ]; then
		#echo 'The previous dialog was answered Yes'
		REMOVE=1
	else
		#echo 'The previous dialog was answered No or interrupted with <C-c>'
		REMOVE=0
	fi
	
	##------------------------ INPUT FORMATS
	checklist=(dialog --separate-output --colors
		--backtitle "\Z5Bash Media Manager"
		--checklist "Select format(s):" 22 76 16)
	options=( 
		"flac" "Lossless" on
		"wav" "Waveform" on
		"ogg" "OGG Vorbis" on
		"m4a" "Apple Audio" on
		"wma" "Windows Audio" on)
	choices=$("${checklist[@]}" "${options[@]}" 2>&1 >/dev/tty)
	clear
	FORMAT_ARRAY=()
	for choice in $choices
	do
		FORMAT_ARRAY+=("$choice")
	done
	#error checks
	if [ "$FORMAT_ARRAY" == "" ]; then echo -e "nothing selected, aborting..."; sleep 2;
	clear && eval surserver-launcher; exit 1; fi 
	
	##----------------------- OUTPUT BITRATE
	BITRATE=$(dialog --stdout --colors \
		--backtitle "\Z5Bash Media Manager" \
		--menu 'Choose MP3 bitrate:' \
		0 0 0 \
		'80k' 'Poor Quality Lossy' \
		'192k' 'Low Quality Lossy (recommended)' \
		'256k' 'Mid Quality Lossy' \
		'320k' 'High Quality Lossy' \
		Custom '8k -> 320k')
	if [ "$BITRATE" == 'Custom' ]; then
		BITRATE=$(dialog --colors \
		--backtitle "\Z5Bash Media Manager" \
		--title "SurServer Converter MP3" \
        --inputbox "Enter desired bitrate:\n (ex.: 48k)" 10 40 \
		3>&1 1>&2 2>&3 3>&-)
		clear
	fi
	#error checks
	if [ "$BITRATE" == "" ]; then echo -e "bitrate cant be empty, aborting..."; sleep 2;
	clear && eval surserver-launcher; exit 1; fi 
	##TODO: add error check if var doesnt end with "k"

	##----------------------- EXECUTE TASKS
	clear && execute_tasks;
}

## START
if [ "$1" = '--auto' ] || [ "$1" = '-a' ]; then
	cd "$AUDIOROOT" &>/dev/null || { echo -e "${ERROR}ERROR: Path ${WARN}$AUDIOROOT${ERROR} not found\n${NC}auto-mode: ${ERROR}FAILED!${NC}"; exit 1; }
	echo -e "\nauto-mode: ${OK}START${NC}"
	echo -e "path: ${OK}$AUDIOROOT${NC}\n"
	execute_tasks;

elif [ "$1" = '--no-gui' ] || [ "$1" = '-n' ]; then
	## setup flags
	check_path;
	set_input_format;
	set_output_format;
	set_removal_flag;
	## start the task(s)
	execute_tasks && echo -e 'Done.'

elif [ "$1" = '--help' ] || [ "$1" = '-h' ]; then
	echo -e "${OK}SurServer Converter MP3${NC}"
	echo -e "Converts multiple formats to MP3 for streaming."
    echo -e "${WARN}Folders: Audio ROOT and JUNK are set up in .evn file.${NC}"
	echo -e "Usage: surserver-mp3_converter [-arg] [--arg]"
	echo -e "or run without args for GUI mode.\n"
	echo -e " -n [--no-gui]	-> No GUI interactive mode"
	echo -e " -a [--auto] 	-> Use defaults. (asks no questions)"
	echo -e " -h [--help] 	-> This message screen."
	exit 1
else
	main_menu;
fi
