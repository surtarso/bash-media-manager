#!/bin/bash

## rsync script to backup all 'goodies'
## requires source and destination folders
## set up in .env file. --help for more info.
## Tarso Galvao 03/04/23 Debian 11

#load enviroment variables
if [ -f $HOME/bmm/.env ]; then
    . $HOME/bmm/.env
else
    echo -e "FATAL ERROR: .env not found.$\n
	Use bmm-setup_enviroment to create one.\nAborting...";
    exit 1;
fi

#todo:  log stuff

#backup task ($1-source $2-dest $3-echo name)
execute_backup (){
	local source_dir="$1"
    local dest_dir="$2"
    local backup_name="$3"
	
	# Clear screen and show banner
	clear && echo ''
	if ! command -v $BANNER >> /dev/null; then echo -e "${WARN}BASH MEDIA MANAGER${NC}"; else eval $BANNER; fi
	echo -e "${HEAD}Media Backup${NC}"
	echo '----------------------------------------------------------'
    echo -e "Backing up: ${OK}$backup_name${NC}"
    #check for rsync
    dep_check rsync;
    #check if folders exist
	dir_check "$source_dir";
	dir_check "$dest_dir";
	echo '----------------------------------------------------------'
	# User reaction timer
	echo -e "Now running: ${ERROR}rsync -avzP ${OK}"$source_dir"* ${WARN}"$dest_dir" ${ERROR}--delete${NC}\n"
	echo -e "Press ${WARN}"Control + C"${NC} to abort.\n"
	for (( i=3; i>0; i--)); do sleep 1 & printf "            $i \r"; wait; done
    # Start backup sync
	if [ "$4" == '--menu' ]; then
    	rsync -avzP "$source_dir"* "$dest_dir" --delete | dialog --colors --no-lines --backtitle "\Z7Bash Media Manager" --progressbox 42 76;
		dialog --colors --no-lines \
        --backtitle "\Z7Bash Media Manager" \
        --infobox "Task complete." 3 19
    	read
    else
		rsync -avzP "$source_dir"* "$dest_dir" --delete
		echo -e "\nBackup complete."
	fi
}

# --no-gui interactive mode menu 
nogui_menu (){
	echo -e 'Choose media to backup: (1-7)'
	select bkp in Series Movies Concerts Audio Stand-up ALL Quit
	do
		case $bkp in
			"Series")
				execute_backup "$SERIESROOT" "$SERIESBACKUP" "SERIES"
				break;;
			"Movies")
				execute_backup "$MOVIESROOT" "$MOVIESBACKUP" "MOVIES"
				break;;
			"Concerts")
				execute_backup "$CONCERTSROOT" "$CONCERTSBACKUP" "CONCERTS"
				break;;
            "Audio")
                execute_backup "$AUDIOROOT" "$AUDIOBACKUP" "AUDIO"
				break;;
			"Stand-up")
				execute_backup "$STANDUPROOT" "$STANDUPBACKUP" "STAND-UP"
				break;;
			"ALL")
				execute_backup "$SERIESROOT" "$SERIESBACKUP" "SERIES"
				execute_backup "$MOVIESROOT" "$MOVIESBACKUP" "MOVIES"
				execute_backup "$CONCERTSROOT" "$CONCERTSBACKUP" "CONCERTS"
				execute_backup "$STANDUPROOT" "$STANDUPBACKUP" "STAND-UP"
				execute_backup "$AUDIOROOT" "$AUDIOBACKUP" "AUDIO"
				break;;
			"Quit")
				exit 1
                ;;
			*)
				echo -e 'Not a valid choice. Use (1-7)';;
		esac
	done
}

## dialog interactive move menu (checklist)
main_menu () {
	checklist=(dialog --no-lines --separate-output --colors \
	--backtitle "\Z7Bash Media Manager" \
	--checklist "Select a preset: (use spacebar)" 22 0 16)
	options=(1 "Audio    $AUDIOROOT -> $AUDIOBACKUP" off    
			2 "Series   $SERIESROOT -> $SERIESBACKUP" off
			3 "Movies   $MOVIESROOT -> $MOVIESBACKUP" off
			4 "Concerts $CONCERTSROOT -> $CONCERTSBACKUP" off
			5 "Stand-up $STANDUPROOT -> $STANDUPBACKUP" off)
	choices=$("${checklist[@]}" "${options[@]}" 2>&1 >/dev/tty)
	clear
	for choice in $choices
	do
		case $choice in
			1)
				execute_backup "$AUDIOROOT" "$AUDIOBACKUP" "AUDIO" --menu;
				;;
			2)
				execute_backup "$SERIESROOT" "$SERIESBACKUP" "SERIES" --menu;
				;;
			3)
				execute_backup "$MOVIESROOT" "$MOVIESBACKUP" "MOVIES" --menu;
				;;
			4)
				execute_backup "$CONCERTSROOT" "$CONCERTSBACKUP" "CONCERTS" --menu;
				;;
			5)
				execute_backup "$STANDUPROOT" "$STANDUPBACKUP" "STAND-UP" --menu;
				;;
		esac
	done
	
	if [ $? -ne 1 ]; then
		clear && eval bmm-launcher; exit 0;
	else
		clear && eval bmm-launcher; exit 1;
	fi
}

## check command arguements
if [ "$1" = '-s' ] || [ "$1" = '--series' ]; then
    echo '1' | nogui_menu;

elif [ "$1" = '-m' ] || [ "$1" = '--movies' ]; then
    echo '2' | nogui_menu;

elif [ "$1" = '-c' ] || [ "$1" = '--concerts' ]; then
    echo '3' | nogui_menu;

elif [ "$1" = '-a' ] || [ "$1" = '--audio' ]; then
    echo '4' | nogui_menu;

elif [ "$1" = '-u' ] || [ "$1" = '--stand-up' ]; then
    echo '5' | nogui_menu;

elif [ "$1" = '-f' ] || [ "$1" = '--full' ]; then
    echo '6' | nogui_menu;

elif [ "$1" = '-n' ] || [ "$1" = '--no-gui' ]; then
	if ! command -v $BANNER >> /dev/null; then echo -e "${WARN}BASH MEDIA MANAGER${NC}"; else eval $BANNER; fi
    echo -e "${OK}Media Backup${NC}"
    echo -e "${WARN}Entering no-GUI interactive-mode${NC}"
    nogui_menu;

elif [ "$1" = '-h' ] || [ "$1" = '--help' ]; then
	if ! command -v $BANNER >> /dev/null; then echo -e "${WARN}BASH MEDIA MANAGER${NC}"; else eval $BANNER; fi
    echo -e "${HEAD}Media Backup"
    echo -e "${OK}Backup manager for server media.\n${NC}"
	echo -e "Use with no arguements to enter the GUI."
    echo -e "Usage: bmm-media_backup [-arg] [--arg]\n"
    echo -e " -s [--series]    -> Backup series library."
    echo -e " -m [--movies]    -> Backup movies library."
    echo -e " -c [--concerts]  -> Backup concerts library."
    echo -e " -a [--audio]     -> Backup audio library."
	echo -e " -u [--stand-up]  -> Backup stand-up library"
    echo -e " -f [--full]      -> Backup all libraries."
    echo -e " -n [--no-gui]    -> Interactive-mode without a GUI.\n"
    echo -e " -h [--help]      -> Shows this screen."
else    
    main_menu;
fi
